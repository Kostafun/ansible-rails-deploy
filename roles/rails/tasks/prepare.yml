---

- name: rails prepare - copy /etc/gemrs
  copy: 'src=gemrc dest=/etc/gemrc owner=root group=root mode=0644'
  when: not skip_rails_prepare

- name: rails prepare - create app dirs
  file:
    dest: "{{ item }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0755
    recurse: yes
    state: directory
  with_items:
    - "{{ rails_path_app }}/releases"
    - "{{ rails_path_app }}/shared/"
    - "{{ rails_path_app }}/shared/pids"
    - "{{ rails_path_app }}/shared/tmp"
    - "{{ rails_path_app }}/shared/config/unicorn"

- name: rails prepare - create unicorn conf dir
  file:
    dest: /etc/unicorn
    state: directory

- name: rails prepare - create unicorn config
  template: src=unicorn-app.j2 dest=/etc/unicorn/{{ app_name }}.conf owner=root group=root mode=0644

- name: Install unicorn systemd service
  template: src=unicorn.service.j2 dest=/etc/systemd/system/unicorn-{{ app_name }}.service owner=root group=root mode=0755

- name: Create unicorn config directory
  file: dest=/etc/unicorn state=directory owner=root group=root mode=0755

- name: rails prepare - create unicorn.rb
  template: src=unicorn_rb.j2 dest={{ rails_path_app }}/shared/config/unicorn/unicorn.rb owner={{ user }} group={{ user }}
  become_user: "{{ user }}"
  become: yes

- name: rails prepare - create role
  postgresql_user: login_user=postgres name={{ user }} password={{ db_pass }} role_attr_flags=CREATEDB,SUPERUSER
  become_user: postgres
  become: yes

- name: Nginx | Configure apps
  template: src={{ nginx_conf_tpl }} dest=/etc/nginx/sites-available/{{ app_name }}.conf group=www-data owner=www-data force=yes

- name: Nginx | Enable apps
  file: path=/etc/nginx/sites-enabled/{{ app_name }}.conf src=/etc/nginx/sites-available/{{ app_name }}.conf state=link
  ignore_errors: yes








#- name: rails prepare - create db
#  postgresql_db: encoding=UTF-8 login_user=postgres name={{ db_name }} owner={{ user }} state=present
#  become_user: postgres
#  become: yes

